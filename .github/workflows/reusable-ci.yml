name: Reusable Build and manage version

on:
  workflow_call:
    inputs:
      DOCKER_REGISTRY:
        description: 'DOCKER_REGISTRY'
        required: true
        type: string
      DOCKER_REGISTRY_SHORT:
        description: 'DOCKER_REGISTRY_SHORT'
        required: true
        type: string
      DOCKER_IMAGE_NAME:
        description: 'DOCKER_IMAGE_NAME'
        required: true
        type: string

    secrets:
      DOCKER_USERNAME:
        description: 'DOCKER_USERNAME'
        required: true
      DOCKER_PASSWORD:
        description: 'DOCKER_PASSWORD'
        required: true
      ARM_SUBSCRIPTION_ID: 
        description: 'ARM_SUBSCRIPTION_ID'
        required: true
      ARM_TENANT_ID: 
        description: 'ARM_TENANT_ID'
        required: true
      ARM_CLIENT_ID: 
        description: 'ARM_CLIENT_ID'
        required: true
      ARM_CLIENT_SECRET: 
        description: 'ARM_CLIENT_SECRET'
        required: true

jobs:
  get-version-number:
    name: Get version number
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.inputs.outputs.VERSION }}
    # needs: sonarqube-analysis
    container:
      image:  ${{ inputs.DOCKER_REGISTRY}}/achilles-python-runner:latest
      credentials:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Calculate version number
      id: inputs   
      run: |
          export VERSION=$(python3 /devops-tools/versionmanager.py get ./app/_version.py)
          echo "VERSION=$VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
  build:
    name: Build, push and Trivy docker image
    runs-on: ubuntu-latest   
    needs: [get-version-number]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4 
    - name: Build docker image
      env:
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}    
      run: |
        docker build . -t  ${{ inputs.DOCKER_IMAGE_NAME}}
        echo "VERSION = ${{ needs.get-version-number.outputs.VERSION }}"
        az login --service-principal -u $ARM_CLIENT_ID -p $ARM_CLIENT_SECRET --tenant $ARM_TENANT_ID
        az acr login --name ${{ inputs.DOCKER_REGISTRY_SHORT}}
        docker tag ${{ inputs.DOCKER_IMAGE_NAME}} ${{ inputs.DOCKER_REGISTRY}}/${{ inputs.DOCKER_IMAGE_NAME}}:${{ needs.get-version-number.outputs.VERSION }}
        docker push ${{ inputs.DOCKER_REGISTRY}}/${{ inputs.DOCKER_IMAGE_NAME}}:${{ needs.get-version-number.outputs.VERSION }}

  sonarqube-trivy-analysis:
    runs-on: ubuntu-latest
    container:
      image:  ${{ inputs.DOCKER_REGISTRY}}/achilles-python-runner:latest
      credentials:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}    
    needs: [build]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
    - name: Run tests and generate reports
      run: |
        pytest tests/test_examples.py --junitxml=test-results.xml
        coverage run -m pytest tests/test_examples.py --junitxml=test-results.xml
        coverage xml -o coverage.xml
        coverage report
        bandit -r . -f json -o bandit-report.json || true
    - name: Upload XML files
      uses: actions/upload-artifact@v4
      with:
        name: xml-reports
        path: "*.xml"
        retention-days: 30
        if-no-files-found: warn    
    - name: Set up SonarQube project
      run: |
        # Create project and get token
        PROJECT_KEY="${{ github.event.repository.name }}"
        /opt/sonarqube/bin/linux-x86-64/sonar.sh start
        # Wait a bit more for SonarQube to be fully ready
        sleep 60
        # Create project (using default admin credentials)
        curl -u admin:admin -X POST "http://localhost:9000/api/projects/create?project=${PROJECT_KEY}&name=${PROJECT_KEY}"
        echo "http://localhost:9000/api/projects/create?project=${PROJECT_KEY}&name=${PROJECT_KEY}"

        # Generate user token for analysis
        echo  "http://localhost:9000/api/user_tokens/generate?name=github-actions-${GITHUB_RUN_ID}"
        curl -u admin:admin -X POST "http://localhost:9000/api/user_tokens/generate?name=github-actions" -vvv
        TOKEN_RESPONSE=$(curl -u admin:admin -X POST "http://localhost:9000/api/user_tokens/generate?name=github-actions-${GITHUB_RUN_ID}")
        TOKEN=$(echo $TOKEN_RESPONSE | jq -r '.token')
        echo "SONAR_TOKEN=${TOKEN}"
        echo "PROJECT_KEY=${PROJECT_KEY}"

        /github/workspace/sonar/bin/sonar-scanner \
          -Dsonar.projectKey=${PROJECT_KEY} \
          -Dsonar.sources=. \
          -Dsonar.host.url=http://localhost:9000 \
          -Dsonar.login=${TOKEN} \
          -Dsonar.python.coverage.reportPaths=coverage.xml \
          -Dsonar.python.xunit.reportPath=test-results.xml \
          -Dsonar.python.bandit.reportPaths=bandit-report.json \
          -Dsonar.exclusions=tests/**,venv/**,env/**,**/__pycache__/**
        sleep 30
        QUALITY_GATE=$(curl -u ${TOKEN}: "http://localhost:9000/api/qualitygates/project_status?projectKey=${PROJECT_KEY}" | jq -r '.projectStatus.status')
       
        echo "Quality Gate Status: $QUALITY_GATE"       
        if [ "$QUALITY_GATE" != "OK" ]; then
          echo "Quality Gate failed!"
          exit 1
        fi   
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@0.28.0
      with:
        image-ref: '${{ inputs.DOCKER_REGISTRY}}/${{ inputs.DOCKER_IMAGE_NAME}}:${{ needs.get-version-number.outputs.VERSION }}'
        format: 'sarif'
        output: 'trivy-results.sarif'
      env:
        TRIVY_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        TRIVY_PASSWORD: ${{ secrets.DOCKER_PASSWORD }} 
        # cat trivy.sarif | jq .runs[].tool.driver.rules[].properties.tags | grep -i high | wc
    - name: Upload Trivy scan results
      uses: actions/upload-artifact@v4
      with:
        name: trivy-results
        path: "*.sarif"
        retention-days: 30
        if-no-files-found: warn  
    - name: Generate report
      id: report   
      run: |
        git fetch --all
        export TICKET_LIST=$(git log remotes/origin/${{ env.TARGET_BRANCH }}..remotes/origin/${{ env.SOURCE_BRANCH }} --oneline --no-merges --pretty=format:"%s" --reverse | cut -f1 -d':' | uniq)
        export TICKET_LIST_COUNT=$(git log remotes/origin/${{ env.TARGET_BRANCH }}..remotes/origin/${{ env.SOURCE_BRANCH }} --oneline --no-merges --pretty=format:"%s" --reverse | cut -f1 -d':' | uniq |wc -l)

        cat > commit-comparison-report.md << 'EOF'
        # Branch Comparison Report
        
        **Date:** $(date)
        **Source Branch:** ${{ env.SOURCE_BRANCH }}
        **Target Branch:** ${{ env.TARGET_BRANCH }}
        **Total Commits:** 
        EOF
        echo "$TICKET_COUNT" >> commit-comparison-report.md
        echo "\n## Commit List\n" >> commit-comparison-report.md
        echo "$TICKET_LIST" >> commit-comparison-report.md

      continue-on-error: true
    - name: Upload comparison artifacts
      uses: actions/upload-artifact@v4
      with:
        name: commit-comparison-report
        path: |
          commit-comparison-report.md
        retention-days: 30